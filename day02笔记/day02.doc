### HelloWorld小程序

~~~
实现步骤？
	1.创建一个文本文件，名字叫做HelloWorld,将后缀名.txt改为.java
	2.在该文件中写以下内容：
		public class HelloWorld {
            public static void main(String[] args) {
                System.out.println("约吗");
            }
        }
        
        注意：
        	1.哪些地方用空格，哪些地方用点
        	2.哪些地方大写，哪些地方小写
        	3.哪些地方用{}，哪些地方用()，哪些地方用[]
        	
	3.编译
		注意：编译操作需要用到jdk中的bin目录中的javac.exe
		
		编译格式：javac HelloWorld.java
		
		编译成功之后会生成一个HelloWorld.class文件
	
	4.运行
		注意：运行操作需要用到jdk中的bin目录中的java.exe
		
		运行格式：java HelloWorld
~~~

### 环境变量的配置

~~~
我们为什么要配置环境变量？
	在任意目录下都可以使用到javac.exe和java.exe
	
环境变量的配置方式？
	方式一：
		1.在桌面找到我的电脑，鼠标右键选择属性，打开一个新的窗口
		2.在新的窗口中找到高级系统设置，鼠标点击，打开一个新的窗口
		3.在新的窗口中找到环境变量，鼠标点击，打开一个新的窗口
		4.在新的窗口中找到系统变量，在系统变量中找path变量名
		5.在path变量中添加一个新的值：D:\develop\jdk1.8\jdk1.8.0_241\bin
	
	方式二：
		1.在桌面找到我的电脑，鼠标右键选择属性，打开一个新的窗口
		2.在新的窗口中找到高级系统设置，鼠标点击，打开一个新的窗口
		3.在新的窗口中找到环境变量，鼠标点击，打开一个新的窗口
		4.在新的窗口中找到系统变量，在系统变量中新建一个变量名：JAVA_HOME，
		  变量值：D:\develop\jdk1.8\jdk1.8.0_241
		5.在新的窗口中找到系统变量，在系统变量中找path变量名
		6.在path变量中将JAVA_HOME系统变量添加到path系统变量中
			%JAVA_HOME%\bin
			
		注意：
			1.%%之间存放的是系统变量名
			2.路径与路径之间要用分号隔开
		
	注意：推荐使用方式二

怎么验证是否配置成功？
	打开dos窗口，在任意目录下输入：javac.exe和java.exe，如果没有提示错误，就说明配置成功
~~~

### 注释

~~~
什么是注释？
	用来解释说明的
	
注释的分类？
	1.单行注释：
		//注释的内容
		
	2.多行注释：
		/*注释的内容*/
	
	3.文档注释：
		/**注释的内容*/
		
注释的作用？
	1.用来解释说明，提高了代码的阅读性
	2.可以帮助我们查找一些简单的错误

注释的注意事项？
	1.单行注释可以嵌套
		// //
		正确的
	2.多行注释不可以嵌套
		/*
			/*
			
			*/
		*/
		错误的
~~~

### 关键字

~~~
什么是关键字？
	关键字就是Java给我们提供好的一些单词
	每个关键字都有它自身的含义
	
关键字的注意事项？
	1.关键字的每个字母都是小写的
	2.main不是关键字
~~~

### 标识符

~~~
什么是标识符？
	我们自己命名的单词，自个起的名字就是标识符
	
标识符的组成规则？
	可以由26个大小写英文字母，数字，美元符号和下划线组成
	
标识符的注意事项？
	1.数字不能开头
	2.标识符不能和关键字同名
~~~

### 常量

~~~
什么是常量？
	永恒不变的量，就称为常量
	
常量的分类？
	字面值常量？
		整数常量：1, 2, 12, 13, .......
		小数常量：1.1, 3.14, ........
		字符常量：由单引号括起来的，值有且只有一个
			'a', 'b', '约', '&', ' ' 正确的
			'ab', '' 错误的
		字符串常量：由双引号括起来的，值随意
			"a", "ab", "约吗", "123", "" 正确的
		布尔常量：只有两个值
			true, false
		空常量：只有一个值
			null
	
	自定义常量？
		以后学
~~~

### 进制

~~~
常识？
	生活中使用十进制
	计算机中使用二进制
	
进制的分类？
	二进制：逢二进一，0b
		0b1010
	
	八进制：逢八进一，0
		012
	
	十进制：逢十进一，正常写
		12
	
	十六进制：逢十六进一，0x
		0x12
		0x1A
	
		10 -> A
		11 -> B
		12 -> C
		13 -> D
		14 -> E
		15 -> F

	注意：计算机底层对数字进行运算，都是二进制运算，也就是由0或者1组成的数进行运算，而每一个1或者0都称为1个(bit)比特位
		1byte = 8bit
		1k = 1024byte
		1m = 1024k
		1g = 1024m
		1t = 1024g
		
		计算机对数据进行运算和存储的最小单位是byte，而不是bit
		
进制的转换？
	8421码快速转换法
~~~

### 二进制的原码反码和补码

~~~
3 - 1 = 2

底层：
	将3的十进制变成二进制的原码形式，原码再变成反码，反码再变成补码
	将-1的十进制变成二进制的原码形式，原码再变成反码，反码再变成补码
	两个二进制的补码运算，会得到一个新的二进制的补码形式，补码再变成反码，反码再变成原码
	原码转换成十进制
	
数字有正数和负数：
	正数：原码，反码和补码是一样的
	负数：
		原码 -> 反码：除去符号位，其余0变1，1变0
					符号位：二进制最左边的那一位，就称为符号位，正数的符号位为0，负数的符号位为1
		反码 -> 补码：+1
~~~

### 变量

~~~
什么是变量？
	在一定范围内，可以变化的量就是变量
	
变量的定义格式？
	格式一(直接赋值)：数据类型 变量名 = 数据;
			int     a   =  12;
			
	格式二(间接赋值)：数据类型 变量名;
		   变量名 = 数据;
		   	int    a;
		   	a  =  12;
		   	
	说明：当我们运行int a = 12这段代码的时候，在内存会开辟一块内存空间，该空间的名字叫做a，该空间存储数据的数据类型就是我们定义的int类型，该空间中存储的数据就是我们赋予的12

我们在使用变量的时候需要注意哪些问题？
	1.当我们想要给float类型的变量赋值的时候，一定要在数据的后面加上f或者F
	2.当我们想要给long类型的变量赋值的时候，建议在数据的后面加上l或者L
	3.当我们想要使用某个变量的时候，一定要先赋值，再使用，要不然会报错
	4.当我们想要给某个变量赋值的时候，一定要考虑该变量的范围，瞎赋值会报错
	5.在同一个花括号{}内，不能定义同名变量
		举例子：
			int i = 1;
			int i = 2;//错误的，因为定义了同名变量
			------------------------------------------------
			int i = 1;
			i = 2;//正确的，这叫做二次赋值
~~~

### 数据类型

~~~
Java中数据类型分类2大类4小类8小种

基本数据类型：
    整型：
		byte(1byte)
		short(2byte)
		int(4byte)
		long(8byte)
		
		整数的默认类型都是int
		
    浮点型：
    	float(4byte)
    	double(8byte)
    	
    	小数的默认类型都是double
    
    布尔型：
    	boolean(1byte)
    	
    字符型：
    	char(2byte)

引用数据类型：
	以后学
~~~

### 数据类型的转换

~~~
数据类型转换的分类？
	隐式类型转换
	强制类型转换
	
隐式类型转换？
	什么是隐式类型转换？
		是指小的数据类型会自动提升为大的数据类型
		
	举例子？
		byte b = 1;
		short s = 2;
		int i = 3;
		long l = 4;
		float f = 5.5F;
		double d = 6.6;
		double sum = b + s + i + l + f + d;
		System.out.println(sum);
		
		当多个数据类型的变量参与运算的时候，小的数据类型会自动提升为大的数据类型

强制类型转换？
	什么是强制类型转换？
		是指大的数据类型会强制转换为小的数据类型
		
	强制类型转换的格式？
		小的数据类型 小的数据类型变量名 = (小的数据类型)大的数据类型变量名
		
	举例子？
		int a = 12;
		//byte b = a; 编译报错
		byte b = (byte)a;
		
	注意事项？
		我们能不使用强制类型转换，尽量不要使用，要不然结果会让你大惊一吃
		
		int a = 130;
		byte b = (byte)a;
		System.out.println(b);//-126
~~~

